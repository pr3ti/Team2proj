name: Build and Test Inventory App

on:
  push:
    branches:
      - branch4 # The branch to trigger on
  pull_request:
    branches:
      - branch4  # The branch to trigger on
  workflow_dispatch:  # Allow manual trigger if needed

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code from the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx (necessary for building Docker images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Build the Docker image using the Dockerfile in the repository
      - name: Build Docker Image
        run: docker build -t carapp .

      # 4. Run tests using pytest inside the Docker container
      - name: Run Tests - Integration Test
        run: docker run --rm carapp python3 -m pytest tests/test_car_integration_app.py

      # 5. Run tests for the main inventory manager code
      - name: Run Tests - Inventory Manager Test
        run: docker run --rm carapp python3 -m pytest tests/test_car_app.py

      # 6. Login to Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USER_NAME }}" --password-stdin

      # 7. Tag and Push Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker tag carapp pretinkya/carapp:latest
          docker push pretinkya/carapp:latest

      # 8. Run the application inside the custom Docker network
      - name: Run Application in Background
        run: docker run -d --name carapp-app -p 5000:5000 carapp
        
      # 9. Wait for the application to start (allow enough time for Flask to bind to port 5000)
      - name: Wait for Application to Start
        run: |
          echo "Waiting for Flask to start..."
          timeout=0
          until curl -s http://localhost:5000 > /dev/null || [ $timeout -eq 120 ]; do
            echo "Waiting for Flask..."
            sleep 1
            timeout=$((timeout + 1))
          done
          if [ $timeout -eq 120 ]; then
            echo "Flask app failed to start after 120 seconds!"
            exit 1
          fi
          echo "Flask app is up!"

      # 10. Test if the website is up and running (status code 200)
      - name: Test Website Availability
        run: |
          if curl -s -o /dev/null -w "%{http_code}" http://localhost:5000 | grep -q "200"; then
            echo "The website is running."
          else
            echo "The website is not running."
            exit 1
          fi

      # 10. Show running containers for debugging (optional)
      - name: Show Running Containers
        run: docker ps
